I'll break down the `is_ordered` function step by step, using examples to illustrate how it works.

The core purpose of `is_ordered` is to check if a sequence of numbers follows a set of ordering rules. Here's a detailed explanation:

```python
def is_ordered(rules: Dict[int, List[int]], case: List[int]) -> bool:
    seen = set()
    for x in case:
        if x in rules:
            orders = set(rules[x])
            if seen.intersection(orders):
                return False
        seen.add(x)
    return True
```

Let's break it down with an example:

Suppose we have these rules:
```python
rules = {
    1: [2],    # 1 should come before 2
    2: [3],    # 2 should come before 3
    4: [5]     # 4 should come before 5
}
```

And we want to check this sequence:
```python
case = [1, 3, 2, 5, 4]
```

Here's how the function processes this sequence:

1. Start with `x = 1`:
   - `seen = set()` (empty)
   - `1` is in rules, so check rules[1] = [2]
   - `seen.intersection({2})` is empty (no violation)
   - Add 1 to seen: `seen = {1}`

2. Next, `x = 3`:
   - `seen = {1}`
   - `3` is not in rules, so just add it to seen
   - `seen = {1, 3}`

3. Next, `x = 2`:
   - `seen = {1, 3}`
   - `2` is in rules, so check rules[2] = [3]
   - `seen.intersection({3})` is not empty! (Found 3)
   - Return `False` because we found a violation: 3 appears before 2, but rule says 2 should come before 3

The key insights:

1. The function maintains a `seen` set of all numbers it has processed so far.

2. For each number, it checks if there are any ordering rules for it (`if x in rules`).

3. If there are rules, it looks at all numbers that should come AFTER the current number (`orders = set(rules[x])`).

4. The critical check: `seen.intersection(orders)` looks for any overlap between:
   - Numbers we've already seen
   - Numbers that should come AFTER our current number

5. If there's any overlap, it means we've violated the ordering rules because we saw a number that should come after our current number BEFORE we saw our current number.

Some examples:

```python
# Valid ordering
case1 = [1, 2, 3, 4, 5]  # Returns True
# Because:
# - 1 comes before 2 (follows rule 1|2)
# - 2 comes before 3 (follows rule 2|3)
# - 4 comes before 5 (follows rule 4|5)

# Invalid ordering
case2 = [2, 1, 4, 3, 5]  # Returns False
# Because:
# - 2 appears before 1, violating rule 1|2
# - 3 appears after 2, but we see other numbers in between

# Also invalid
case3 = [5, 4, 3, 2, 1]  # Returns False
# Because:
# - 5 appears before 4, violating rule 4|5
# - 3 appears before 2, violating rule 2|3
# - 2 appears before 1, violating rule 1|2
```

The function is checking for what we could call "relative ordering violations" - cases where a number appears before another number when the rules say it should appear after it. It doesn't care about the absolute positions of numbers, only their relative positions to each other when there's a rule defining their relationship.

This implementation is quite efficient because:
1. It uses sets for O(1) lookups
2. It only needs to scan the sequence once
3. It stops as soon as it finds any violation
4. It only checks numbers that have rules defined for them

Would you like me to elaborate on any particular aspect of the function or provide more examples?